// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: scara.proto

package scara_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RobotClient is the client API for Robot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotClient interface {
	ExecCommand(ctx context.Context, in *ExecCommandRequest, opts ...grpc.CallOption) (*ExecCommandResponse, error)
	QueueUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Robot_QueueUpdatesClient, error)
}

type robotClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotClient(cc grpc.ClientConnInterface) RobotClient {
	return &robotClient{cc}
}

func (c *robotClient) ExecCommand(ctx context.Context, in *ExecCommandRequest, opts ...grpc.CallOption) (*ExecCommandResponse, error) {
	out := new(ExecCommandResponse)
	err := c.cc.Invoke(ctx, "/scaraproto.Robot/ExecCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) QueueUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Robot_QueueUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Robot_ServiceDesc.Streams[0], "/scaraproto.Robot/QueueUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &robotQueueUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Robot_QueueUpdatesClient interface {
	Recv() (*CommandInfo, error)
	grpc.ClientStream
}

type robotQueueUpdatesClient struct {
	grpc.ClientStream
}

func (x *robotQueueUpdatesClient) Recv() (*CommandInfo, error) {
	m := new(CommandInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RobotServer is the server API for Robot service.
// All implementations must embed UnimplementedRobotServer
// for forward compatibility
type RobotServer interface {
	ExecCommand(context.Context, *ExecCommandRequest) (*ExecCommandResponse, error)
	QueueUpdates(*Empty, Robot_QueueUpdatesServer) error
	mustEmbedUnimplementedRobotServer()
}

// UnimplementedRobotServer must be embedded to have forward compatible implementations.
type UnimplementedRobotServer struct {
}

func (UnimplementedRobotServer) ExecCommand(context.Context, *ExecCommandRequest) (*ExecCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCommand not implemented")
}
func (UnimplementedRobotServer) QueueUpdates(*Empty, Robot_QueueUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method QueueUpdates not implemented")
}
func (UnimplementedRobotServer) mustEmbedUnimplementedRobotServer() {}

// UnsafeRobotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotServer will
// result in compilation errors.
type UnsafeRobotServer interface {
	mustEmbedUnimplementedRobotServer()
}

func RegisterRobotServer(s grpc.ServiceRegistrar, srv RobotServer) {
	s.RegisterService(&Robot_ServiceDesc, srv)
}

func _Robot_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scaraproto.Robot/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).ExecCommand(ctx, req.(*ExecCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_QueueUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RobotServer).QueueUpdates(m, &robotQueueUpdatesServer{stream})
}

type Robot_QueueUpdatesServer interface {
	Send(*CommandInfo) error
	grpc.ServerStream
}

type robotQueueUpdatesServer struct {
	grpc.ServerStream
}

func (x *robotQueueUpdatesServer) Send(m *CommandInfo) error {
	return x.ServerStream.SendMsg(m)
}

// Robot_ServiceDesc is the grpc.ServiceDesc for Robot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Robot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scaraproto.Robot",
	HandlerType: (*RobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCommand",
			Handler:    _Robot_ExecCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueueUpdates",
			Handler:       _Robot_QueueUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scara.proto",
}
