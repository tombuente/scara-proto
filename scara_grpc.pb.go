// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: scara.proto

package scara_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScaraClient is the client API for Scara service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScaraClient interface {
	UploadProgram(ctx context.Context, in *UploadProgramRequest, opts ...grpc.CallOption) (*Empty, error)
}

type scaraClient struct {
	cc grpc.ClientConnInterface
}

func NewScaraClient(cc grpc.ClientConnInterface) ScaraClient {
	return &scaraClient{cc}
}

func (c *scaraClient) UploadProgram(ctx context.Context, in *UploadProgramRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/scaraproto.Scara/UploadProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScaraServer is the server API for Scara service.
// All implementations must embed UnimplementedScaraServer
// for forward compatibility
type ScaraServer interface {
	UploadProgram(context.Context, *UploadProgramRequest) (*Empty, error)
	mustEmbedUnimplementedScaraServer()
}

// UnimplementedScaraServer must be embedded to have forward compatible implementations.
type UnimplementedScaraServer struct {
}

func (UnimplementedScaraServer) UploadProgram(context.Context, *UploadProgramRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProgram not implemented")
}
func (UnimplementedScaraServer) mustEmbedUnimplementedScaraServer() {}

// UnsafeScaraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScaraServer will
// result in compilation errors.
type UnsafeScaraServer interface {
	mustEmbedUnimplementedScaraServer()
}

func RegisterScaraServer(s grpc.ServiceRegistrar, srv ScaraServer) {
	s.RegisterService(&Scara_ServiceDesc, srv)
}

func _Scara_UploadProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScaraServer).UploadProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scaraproto.Scara/UploadProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScaraServer).UploadProgram(ctx, req.(*UploadProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scara_ServiceDesc is the grpc.ServiceDesc for Scara service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scara_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scaraproto.Scara",
	HandlerType: (*ScaraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadProgram",
			Handler:    _Scara_UploadProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scara.proto",
}
